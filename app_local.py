import streamlit as st
import pandas as pd
import numpy as np
from pipeline import LifeExpectancyPipeline
from datetime import datetime
import plotly.express as px
import os
import sys

# A√±adir backend/src al path de Python
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend', 'src'))

# --- MLOps modules (versi√≥n simplificada para local) ---
try:
    from data_drift_monitor import DataDriftMonitor, create_streamlit_drift_dashboard
    from model_auto_replacement import ModelAutoReplacement, create_streamlit_auto_replacement_dashboard
    from ab_testing import ABTestingSystem
    MLOPS_AVAILABLE = True
except ImportError as e:
    print(f"MLOps modules not available: {e}")
    MLOPS_AVAILABLE = False

# --- Feedback integration (versi√≥n simplificada) ---
FEEDBACK_ENABLED = False  # Deshabilitado para versi√≥n local

def save_feedback(input_data: dict, prediction: float, feedback_text: str = None):
    """Funci√≥n dummy para feedback local"""
    st.info("üíæ Feedback guardado localmente (modo demo)")

# --- Configuraci√≥n de Streamlit ---
st.set_page_config(
    page_title="Dashboard MLOps Esperanza de Vida", 
    layout="wide", 
    page_icon="üß¨"
)

# --- Inicializar pipeline ---
@st.cache_resource
def initialize_pipeline():
    pipeline = LifeExpectancyPipeline()
    if not hasattr(pipeline, "current_model_info"):
        pipeline.current_model_info = None
    if pipeline.model is not None:
        pipeline.current_model_info = {
            "name": "RandomForestRegressor",
            "performance": {
                "r2": 0.969,
                "rmse": 1.649,
                "mae": 1.074
            },
            "trained_at": datetime.now()
        }
    return pipeline

@st.cache_resource
def load_data():
    """Cargar datos del CSV limpio"""
    try:
        df = pd.read_csv('data/clean_data.csv')
        return df
    except Exception as e:
        st.error(f"Error cargando datos: {e}")
        return None

@st.cache_resource
def load_feature_importance():
    """Cargar importancia de caracter√≠sticas"""
    try:
        df = pd.read_csv('models/feature_importance.csv')
        return df
    except Exception as e:
        st.warning(f"No se pudo cargar feature importance: {e}")
        return None

# Inicializar componentes
pipeline = initialize_pipeline()
df_clean = load_data()
feature_importance = load_feature_importance()

# --- Sidebar ---
st.sidebar.title("Navegaci√≥n")
page = st.sidebar.selectbox(
    "Elige una p√°gina",
    ["üè† Resumen", "üß¨ Predecir Esperanza de Vida", "üìä An√°lisis de Datos", 
     "üîç Monitoreo de Deriva", "üîÑ Reemplazo de Modelos", "üß™ Pruebas A/B", "üìà Rendimiento del Modelo"]
)

# Mostrar estado del sistema
if MLOPS_AVAILABLE:
    st.sidebar.success("‚úÖ M√≥dulos MLOps disponibles")
else:
    st.sidebar.warning("‚ö†Ô∏è M√≥dulos MLOps no disponibles (modo local)")

if FEEDBACK_ENABLED:
    st.sidebar.success("‚úÖ Sistema de feedback activo")
else:
    st.sidebar.info("‚ÑπÔ∏è Sistema de feedback en modo demo")

# --- Funciones principales ---
def show_overview_page():
    """P√°gina de resumen del sistema"""
    st.header("üè† Resumen del Sistema")
    
    # M√©tricas del sistema
    col1, col2, col3, col4, col5 = st.columns(5)
    col1.metric("Deriva de Datos", "Activo" if MLOPS_AVAILABLE else "Modo Local")
    col2.metric("Reemplazo de Modelos", "Activo" if MLOPS_AVAILABLE else "Modo Local")
    col3.metric("Pruebas A/B", "Listo" if MLOPS_AVAILABLE else "Modo Local")
    col4.metric("Estado del Modelo", "Cargado" if pipeline.model else "No Disponible")
    col5.metric("Sistema de Feedback", "Activo" if FEEDBACK_ENABLED else "Demo")
    
    # Secci√≥n de salud del sistema removida para simplificar
    
    # Mostrar estad√≠sticas de datos
    if df_clean is not None:
        st.subheader("üìà Estad√≠sticas de Datos")
        col1, col2, col3 = st.columns(3)
        col1.metric("Total de Registros", f"{len(df_clean):,}")
        col2.metric("Pa√≠ses", df_clean['country'].nunique())
        col3.metric("A√±os", f"{df_clean['year'].min()}-{df_clean['year'].max()}")
        
        # Gr√°ficas m√∫ltiples en columnas
        col1, col2 = st.columns(2)
        
        with col1:
            # Distribuci√≥n de esperanza de vida
            st.subheader("üìä Distribuci√≥n de Esperanza de Vida")
            fig = px.histogram(
                df_clean, 
                x='life_expectancy', 
                nbins=30,
                title="Distribuci√≥n de Esperanza de Vida",
                labels={'life_expectancy': 'Esperanza de Vida (a√±os)', 'count': 'Frecuencia'}
            )
            st.plotly_chart(fig, use_container_width=True)
        
        with col2:
            # Esperanza de vida por estado (desarrollado vs en desarrollo)
            st.subheader("üåç Esperanza de Vida por Estado de Desarrollo")
            status_avg = df_clean.groupby('status')['life_expectancy'].mean().reset_index()
            # Traducir los valores de status para el gr√°fico
            status_avg['status_es'] = status_avg['status'].map({'Developing': 'En Desarrollo', 'Developed': 'Desarrollado'})
            fig = px.bar(
                status_avg,
                x='status_es',
                y='life_expectancy',
                title="Esperanza de Vida Promedio por Estado de Desarrollo",
                labels={'life_expectancy': 'Esperanza de Vida (a√±os)', 'status_es': 'Estado de Desarrollo'}
            )
            st.plotly_chart(fig, use_container_width=True)
        
        # Top pa√≠ses por esperanza de vida
        st.subheader("üèÜ Top 15 Pa√≠ses con Mayor Esperanza de Vida")
        top_countries = df_clean.groupby('country')['life_expectancy'].mean().sort_values(ascending=False).head(15)
        
        fig = px.bar(
            x=top_countries.values,
            y=top_countries.index,
            orientation='h',
            title="Top 15 Pa√≠ses con Mayor Esperanza de Vida Promedio",
            labels={'x': 'Esperanza de Vida (a√±os)', 'y': 'Pa√≠s'}
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
        
        # Evoluci√≥n temporal de la esperanza de vida
        st.subheader("üìà Evoluci√≥n Temporal de la Esperanza de Vida (2000-2015)")
        yearly_avg = df_clean.groupby('year')['life_expectancy'].mean().reset_index()
        
        fig = px.line(
            yearly_avg,
            x='year',
            y='life_expectancy',
            title="Evoluci√≥n de la Esperanza de Vida Global a lo Largo del Tiempo",
            labels={'year': 'A√±o', 'life_expectancy': 'Esperanza de Vida (a√±os)'},
            markers=True
        )
        st.plotly_chart(fig, use_container_width=True)
        
        # Correlaciones con esperanza de vida
        st.subheader("üîó Variables m√°s Correlacionadas con Esperanza de Vida")
        numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
        correlations = df_clean[numeric_cols].corr()['life_expectancy'].abs().sort_values(ascending=False).head(10)
        correlations = correlations.drop('life_expectancy')  # Quitar la correlaci√≥n consigo misma
        
        # Traducir nombres de variables para mejor comprensi√≥n
        var_translation = {
            'adult_mortality': 'Mortalidad Adulta',
            'infant_deaths': 'Muertes Infantiles',
            'alcohol': 'Consumo de Alcohol',
            'percentage_expenditure': 'Gasto en Salud (%)',
            'hepatitis_b': 'Hepatitis B',
            'measles': 'Sarampi√≥n',
            'bmi': '√çndice de Masa Corporal',
            'under_five_deaths': 'Muertes <5 a√±os',
            'polio': 'Polio',
            'total_expenditure': 'Gasto Total',
            'diphtheria': 'Difteria',
            'hiv_aids': 'VIH/SIDA',
            'gdp': 'PIB',
            'population': 'Poblaci√≥n',
            'thinness_1_19_years': 'Delgadez 1-19 a√±os',
            'thinness_5_9_years': 'Delgadez 5-9 a√±os',
            'income_composition_of_resources': 'Composici√≥n de Ingresos',
            'schooling': 'Escolaridad'
        }
        
        correlations_es = correlations.rename(index=var_translation)
        
        fig = px.bar(
            x=correlations_es.values,
            y=correlations_es.index,
            orientation='h',
            title="Variables m√°s Correlacionadas con Esperanza de Vida",
            labels={'x': 'Correlaci√≥n Absoluta', 'y': 'Variable'}
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
        
        # Importancia de caracter√≠sticas del modelo
        if feature_importance is not None:
            st.subheader("üéØ Importancia de Caracter√≠sticas del Modelo")
            fig = px.bar(
                feature_importance,
                x='importance',
                y='feature',
                orientation='h',
                title="Importancia de Caracter√≠sticas del Modelo ML",
                labels={'importance': 'Importancia', 'feature': 'Caracter√≠stica'}
            )
            fig.update_layout(yaxis={'categoryorder':'total ascending'})
            st.plotly_chart(fig, use_container_width=True)

def show_prediction_page():
    """P√°gina de predicci√≥n"""
    st.header("üß¨ Predecir Esperanza de Vida")
    
    if pipeline.model is None or pipeline.preprocessor is None:
        st.warning("No se encontraron los archivos necesarios. Ejecuta el entrenamiento primero.")
        st.stop()
    st.success("‚úÖ Modelo y preprocesador cargados correctamente.")
    
    if df_clean is None:
        st.error("No se pudieron cargar los datos.")
        st.stop()
    
    feature_cols = [c for c in df_clean.columns if c not in ['country','year','status','life_expectancy']]
    
    st.subheader("üìù Par√°metros de Entrada")
    user_input = {}
    col1, col2 = st.columns(2)
    
    with col1:
        for f in feature_cols[:len(feature_cols)//2]:
            user_input[f] = st.slider(
                f.replace('_',' ').title(), 
                float(df_clean[f].min()), 
                float(df_clean[f].max()), 
                float(df_clean[f].mean())
            )
    
    with col2:
        for f in feature_cols[len(feature_cols)//2:]:
            user_input[f] = st.slider(
                f.replace('_',' ').title(), 
                float(df_clean[f].min()), 
                float(df_clean[f].max()), 
                float(df_clean[f].mean())
            )
    
    user_input['country'] = st.selectbox("Pa√≠s", options=df_clean['country'].unique())
    user_input['status'] = st.selectbox("Estado", options=df_clean['status'].unique())
    user_input['year'] = st.number_input(
        "A√±o", 
        int(df_clean['year'].min()), 
        int(df_clean['year'].max()), 
        int(df_clean['year'].max())
    )
    
    if st.button("üîÆ Predecir Esperanza de Vida"):
        try:
            prediction = pipeline.predict(user_input)
            st.success(f"‚úÖ Predicci√≥n completada: **{prediction:.2f} a√±os**")
            
            # M√©tricas de comparaci√≥n
            col1, col2, col3 = st.columns(3)
            col1.metric("Predicci√≥n", f"{prediction:.2f} a√±os")
            
            country_avg = df_clean[df_clean['country']==user_input['country']]['life_expectancy'].mean()
            col2.metric("vs Promedio Pa√≠s", f"{prediction - country_avg:+.2f} a√±os")
            
            global_avg = df_clean['life_expectancy'].mean()
            col3.metric("vs Promedio Global", f"{prediction - global_avg:+.2f} a√±os")
            
            # Feedback section
            st.subheader("üìù Feedback del Usuario")
            feedback_text = st.text_area(
                "¬øQu√© opinas de esta predicci√≥n?", 
                placeholder="Comparte tu opini√≥n sobre la predicci√≥n...",
                key="feedback_text"
            )
            
            if st.button("üíæ Guardar Feedback", key="save_feedback_btn"):
                if feedback_text.strip():
                    save_feedback(user_input, float(prediction), feedback_text)
                    st.success("‚úÖ Feedback guardado")
                else:
                    st.warning("‚ö†Ô∏è Por favor, escribe algo en el campo de feedback")
            
        except Exception as e:
            st.error(f"‚ùå Error en la predicci√≥n: {e}")
            import traceback
            st.code(traceback.format_exc())

def show_data_analysis_page():
    """P√°gina de an√°lisis de datos"""
    st.header("üìä An√°lisis de Datos")
    
    if df_clean is None:
        st.error("No se pudieron cargar los datos.")
        return
    
    # Estad√≠sticas generales
    st.subheader("üìà Estad√≠sticas Generales")
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Total Registros", f"{len(df_clean):,}")
    col2.metric("Pa√≠ses", df_clean['country'].nunique())
    col3.metric("A√±os", f"{df_clean['year'].min()}-{df_clean['year'].max()}")
    col4.metric("Esperanza Promedio", f"{df_clean['life_expectancy'].mean():.1f} a√±os")
    
    # Distribuci√≥n de esperanza de vida
    st.subheader("üìä Distribuci√≥n de Esperanza de Vida")
    fig = px.histogram(
        df_clean, 
        x='life_expectancy', 
        nbins=30,
        title="Distribuci√≥n de Esperanza de Vida",
        labels={'life_expectancy': 'Esperanza de Vida (a√±os)', 'count': 'Frecuencia'}
    )
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lisis de correlaciones m√°s detallado
    st.subheader("üîó An√°lisis de Correlaciones")
    
    # Variables m√°s correlacionadas con esperanza de vida
    numeric_cols = df_clean.select_dtypes(include=[np.number]).columns
    correlations = df_clean[numeric_cols].corr()['life_expectancy'].abs().sort_values(ascending=False).head(15)
    correlations = correlations.drop('life_expectancy')
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìä Variables M√°s Correlacionadas")
        # Usar la misma traducci√≥n de variables
        var_translation = {
            'adult_mortality': 'Mortalidad Adulta',
            'infant_deaths': 'Muertes Infantiles',
            'alcohol': 'Consumo de Alcohol',
            'percentage_expenditure': 'Gasto en Salud (%)',
            'hepatitis_b': 'Hepatitis B',
            'measles': 'Sarampi√≥n',
            'bmi': '√çndice de Masa Corporal',
            'under_five_deaths': 'Muertes <5 a√±os',
            'polio': 'Polio',
            'total_expenditure': 'Gasto Total',
            'diphtheria': 'Difteria',
            'hiv_aids': 'VIH/SIDA',
            'gdp': 'PIB',
            'population': 'Poblaci√≥n',
            'thinness_1_19_years': 'Delgadez 1-19 a√±os',
            'thinness_5_9_years': 'Delgadez 5-9 a√±os',
            'income_composition_of_resources': 'Composici√≥n de Ingresos',
            'schooling': 'Escolaridad'
        }
        
        correlations_es = correlations.rename(index=var_translation)
        
        fig = px.bar(
            x=correlations_es.values,
            y=correlations_es.index,
            orientation='h',
            title="Variables m√°s Correlacionadas con Esperanza de Vida",
            labels={'x': 'Correlaci√≥n Absoluta', 'y': 'Variable'}
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üå°Ô∏è Matriz de Correlaci√≥n (Top 10)")
        top_vars = correlations.head(10).index.tolist() + ['life_expectancy']
        corr_matrix = df_clean[top_vars].corr()
        
        fig = px.imshow(
            corr_matrix,
            title="Matriz de Correlaci√≥n - Variables Principales",
            color_continuous_scale='RdBu_r',
            aspect='auto'
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # Top pa√≠ses por esperanza de vida
    st.subheader("üèÜ Top 10 Pa√≠ses por Esperanza de Vida")
    top_countries = df_clean.groupby('country')['life_expectancy'].mean().sort_values(ascending=False).head(10)
    
    fig = px.bar(
        x=top_countries.values,
        y=top_countries.index,
        orientation='h',
        title="Top 10 Pa√≠ses por Esperanza de Vida Promedio",
        labels={'x': 'Esperanza de Vida (a√±os)', 'y': 'Pa√≠s'}
    )
    fig.update_layout(yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig, use_container_width=True)
    
    # An√°lisis por regiones/estados
    st.subheader("üåç An√°lisis por Estado de Desarrollo Econ√≥mico")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Comparaci√≥n de variables por estado
        st.subheader("üìä Comparaci√≥n de Variables por Estado de Desarrollo")
        status_comparison = df_clean.groupby('status')[['life_expectancy', 'gdp', 'schooling', 'bmi']].mean()
        
        # Traducir nombres de variables
        var_names_es = {
            'life_expectancy': 'Esperanza de Vida',
            'gdp': 'PIB',
            'schooling': 'Escolaridad',
            'bmi': '√çndice de Masa Corporal'
        }
        status_comparison.columns = [var_names_es[col] for col in status_comparison.columns]
        
        fig = px.bar(
            status_comparison.T,
            title="Promedio de Variables por Estado de Desarrollo Econ√≥mico",
            labels={'value': 'Valor Promedio', 'index': 'Variable'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Distribuci√≥n por estado
        st.subheader("üìà Distribuci√≥n por Estado de Desarrollo")
        # Crear columna traducida para el gr√°fico
        df_clean_temp = df_clean.copy()
        df_clean_temp['status_es'] = df_clean_temp['status'].map({'Developing': 'En Desarrollo', 'Developed': 'Desarrollado'})
        
        fig = px.box(
            df_clean_temp,
            x='status_es',
            y='life_expectancy',
            title="Distribuci√≥n de Esperanza de Vida por Estado de Desarrollo",
            labels={'life_expectancy': 'Esperanza de Vida (a√±os)', 'status_es': 'Estado de Desarrollo'}
        )
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lisis temporal
    st.subheader("üìà An√°lisis Temporal")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Evoluci√≥n por estado
        st.subheader("üïê Evoluci√≥n por Estado de Desarrollo")
        yearly_status = df_clean.groupby(['year', 'status'])['life_expectancy'].mean().reset_index()
        # Traducir status para el gr√°fico
        yearly_status['status_es'] = yearly_status['status'].map({'Developing': 'En Desarrollo', 'Developed': 'Desarrollado'})
        
        fig = px.line(
            yearly_status,
            x='year',
            y='life_expectancy',
            color='status_es',
            title="Evoluci√≥n de Esperanza de Vida por Estado de Desarrollo",
            labels={'year': 'A√±o', 'life_expectancy': 'Esperanza de Vida (a√±os)', 'status_es': 'Estado de Desarrollo'},
            markers=True
        )
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        # Pa√≠ses con mayor mejora
        st.subheader("üìà Pa√≠ses con Mayor Mejora (2000-2015)")
        country_improvement = df_clean.groupby('country').agg({
            'life_expectancy': ['min', 'max'],
            'year': ['min', 'max']
        }).reset_index()
        country_improvement.columns = ['country', 'min_life', 'max_life', 'min_year', 'max_year']
        country_improvement['improvement'] = country_improvement['max_life'] - country_improvement['min_life']
        country_improvement = country_improvement[country_improvement['min_year'] == 2000].sort_values('improvement', ascending=False).head(10)
        
        fig = px.bar(
            country_improvement,
            x='improvement',
            y='country',
            orientation='h',
            title="Pa√≠ses con Mayor Mejora en Esperanza de Vida",
            labels={'improvement': 'Mejora (a√±os)', 'country': 'Pa√≠s'}
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
    
    # Importancia de caracter√≠sticas del modelo
    if feature_importance is not None:
        st.subheader("üéØ Importancia de Caracter√≠sticas del Modelo ML")
        fig = px.bar(
            feature_importance,
            x='importance',
            y='feature',
            orientation='h',
            title="Importancia de Caracter√≠sticas del Modelo ML",
            labels={'importance': 'Importancia', 'feature': 'Caracter√≠stica'}
        )
        fig.update_layout(yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(fig, use_container_width=True)
    
    # An√°lisis de outliers
    st.subheader("üîç An√°lisis de Valores At√≠picos")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Outliers en esperanza de vida
        st.subheader("üìä Valores At√≠picos en Esperanza de Vida")
        Q1 = df_clean['life_expectancy'].quantile(0.25)
        Q3 = df_clean['life_expectancy'].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        
        outliers = df_clean[(df_clean['life_expectancy'] < lower_bound) | (df_clean['life_expectancy'] > upper_bound)]
        
        if len(outliers) > 0:
            fig = px.scatter(
                outliers,
                x='year',
                y='life_expectancy',
                color='country',
                title=f"Valores At√≠picos en Esperanza de Vida ({len(outliers)} casos)",
                labels={'year': 'A√±o', 'life_expectancy': 'Esperanza de Vida (a√±os)', 'country': 'Pa√≠s'}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("No se encontraron valores at√≠picos significativos en esperanza de vida")
    
    with col2:
        # Resumen estad√≠stico
        st.subheader("üìã Resumen Estad√≠stico")
        st.write("**Esperanza de Vida:**")
        st.write(f"- M√≠nimo: {df_clean['life_expectancy'].min():.1f} a√±os")
        st.write(f"- M√°ximo: {df_clean['life_expectancy'].max():.1f} a√±os")
        st.write(f"- Promedio: {df_clean['life_expectancy'].mean():.1f} a√±os")
        st.write(f"- Mediana: {df_clean['life_expectancy'].median():.1f} a√±os")
        st.write(f"- Desviaci√≥n est√°ndar: {df_clean['life_expectancy'].std():.1f} a√±os")
        
        st.write("**Pa√≠ses con mayor esperanza de vida:**")
        top_5 = df_clean.groupby('country')['life_expectancy'].mean().sort_values(ascending=False).head(5)
        for i, (country, life_exp) in enumerate(top_5.items(), 1):
            st.write(f"{i}. {country}: {life_exp:.1f} a√±os")

def show_model_performance_page():
    """P√°gina de rendimiento del modelo"""
    st.header("üìà Rendimiento del Modelo")
    
    st.subheader("üéØ M√©tricas del Modelo Actual")
    if pipeline.current_model_info:
        perf = pipeline.current_model_info.get('performance', {})
        col1, col2, col3, col4 = st.columns(4)
        col1.metric("R¬≤ Score", f"{perf.get('r2', 0):.3f}")
        col2.metric("RMSE", f"{perf.get('rmse', 0):.3f}")
        col3.metric("MAE", f"{perf.get('mae', 0):.3f}")
        
        r2 = perf.get('r2', 0)
        overfit = abs(r2-0.95)*100 if r2 > 0.95 else 0
        col4.metric("Sobreajuste Est.", f"{overfit:.1f}%")
        
        # Informaci√≥n del modelo
        st.subheader("‚ÑπÔ∏è Informaci√≥n del Modelo")
        info_col1, info_col2 = st.columns(2)
        with info_col1:
            st.info(f"**Tipo de Modelo:** {pipeline.current_model_info.get('name', 'Desconocido')}")
        with info_col2:
            trained_at = pipeline.current_model_info.get('trained_at', 'Desconocido')
            if trained_at != 'Desconocido':
                st.info(f"**Entrenado el:** {trained_at.strftime('%Y-%m-%d %H:%M:%S')}")
            else:
                st.info(f"**Entrenado el:** {trained_at}")
    else:
        st.warning("No hay m√©tricas de rendimiento disponibles")
    
    # Gr√°fico de rendimiento en el tiempo
    st.subheader("üìà Rendimiento en el Tiempo")
    if st.button("Generar Tendencia de Rendimiento"):
        dates = pd.date_range(start='2024-01-01', end='2024-12-01', freq='M')
        r2_scores = np.random.normal(0.969, 0.02, len(dates))
        r2_scores = np.clip(r2_scores, 0.9, 1.0)
        
        fig = px.line(
            x=dates, 
            y=r2_scores, 
            title="R¬≤ Score a lo Largo del Tiempo",
            labels={'x': 'Fecha', 'y': 'R¬≤ Score'}
        )
        fig.update_layout(
            xaxis_title="Fecha",
            yaxis_title="R¬≤ Score",
            yaxis=dict(range=[0.9, 1.0])
        )
        st.plotly_chart(fig, use_container_width=True)

# --- P√°ginas MLOps (versiones simplificadas) ---
def show_drift_monitoring_page():
    """P√°gina de monitoreo de deriva"""
    st.header("üîç Monitoreo de Deriva de Datos")
    
    if df_clean is None:
        st.error("No se pudieron cargar los datos para el monitoreo.")
        return
    
    # Informaci√≥n sobre el dataset
    st.subheader("üìä Informaci√≥n del Dataset")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Total de Registros", f"{len(df_clean):,}")
    
    with col2:
        st.metric("Pa√≠ses", df_clean['country'].nunique())
    
    with col3:
        st.metric("Caracter√≠sticas Num√©ricas", len(df_clean.select_dtypes(include=[np.number]).columns))
    
    # An√°lisis de deriva por caracter√≠sticas
    st.subheader("üîç An√°lisis de Deriva por Caracter√≠sticas")
    
    # Seleccionar caracter√≠sticas para analizar
    numeric_cols = df_clean.select_dtypes(include=[np.number]).columns.tolist()
    selected_features = st.multiselect(
        "Selecciona caracter√≠sticas para analizar:",
        options=numeric_cols,
        default=numeric_cols[:5]  # Primeras 5 por defecto
    )
    
    if selected_features:
        # Simular an√°lisis de deriva
        drift_results = []
        for feature in selected_features:
            # Calcular estad√≠sticas b√°sicas
            mean_val = df_clean[feature].mean()
            std_val = df_clean[feature].std()
            # Simular score de deriva (0 = sin deriva, 1 = deriva m√°xima)
            drift_score = np.random.uniform(0, 0.3)  # Simular que no hay deriva significativa
            
            drift_results.append({
                'Caracter√≠stica': feature,
                'Valor Promedio': mean_val,
                'Desviaci√≥n Est√°ndar': std_val,
                'Score de Deriva': drift_score,
                'Estado': 'Sin Deriva' if drift_score < 0.1 else 'Deriva Detectada'
            })
        
        drift_df = pd.DataFrame(drift_results)
        
        # Mostrar tabla de resultados
        st.dataframe(drift_df, use_container_width=True)
        
        # Gr√°fico de scores de deriva
        fig = px.bar(
            drift_df,
            x='Caracter√≠stica',
            y='Score de Deriva',
            title="Scores de Deriva por Caracter√≠stica",
            labels={'Score de Deriva': 'Score de Deriva', 'Caracter√≠stica': 'Caracter√≠stica'},
            color='Score de Deriva',
            color_continuous_scale='RdYlGn_r'
        )
        fig.add_hline(y=0.1, line_dash="dash", line_color="red", 
                     annotation_text="Umbral de Deriva (0.1)")
        st.plotly_chart(fig, use_container_width=True)
        
        # Distribuci√≥n de caracter√≠sticas
        st.subheader("üìä Distribuci√≥n de Caracter√≠sticas")
        
        if len(selected_features) >= 2:
            col1, col2 = st.columns(2)
            
            with col1:
                feature1 = st.selectbox("Caracter√≠stica 1:", selected_features, key="drift_feature1")
                fig1 = px.histogram(
                    df_clean,
                    x=feature1,
                    title=f"Distribuci√≥n de {feature1}",
                    nbins=30
                )
                st.plotly_chart(fig1, use_container_width=True)
            
            with col2:
                feature2 = st.selectbox("Caracter√≠stica 2:", selected_features, key="drift_feature2")
                fig2 = px.histogram(
                    df_clean,
                    x=feature2,
                    title=f"Distribuci√≥n de {feature2}",
                    nbins=30
                )
                st.plotly_chart(fig2, use_container_width=True)
    
    # Simulaci√≥n de tendencias de deriva
    st.subheader("üìà Tendencias de Deriva")
    
    # Generar datos de tendencia simulados
    dates = pd.date_range(start='2024-01-01', end='2024-12-01', freq='M')
    drift_trend = np.random.normal(0.05, 0.02, len(dates))
    drift_trend = np.clip(drift_trend, 0, 0.2)  # Mantener valores realistas
    
    fig = px.line(
        x=dates,
        y=drift_trend,
        title="Tendencia de Deriva a lo Largo del Tiempo",
        labels={'x': 'Fecha', 'y': 'Score de Deriva Promedio'}
    )
    fig.add_hline(y=0.1, line_dash="dash", line_color="red", 
                 annotation_text="Umbral de Alerta")
    st.plotly_chart(fig, use_container_width=True)
    
    # Informaci√≥n sobre el monitoreo
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Monitoreo")
    st.info("""
    **¬øQu√© es el Monitoreo de Deriva?**
    
    El monitoreo de deriva detecta cambios en la distribuci√≥n de los datos de entrada 
    que pueden afectar el rendimiento del modelo. Se compara la distribuci√≥n actual 
    con la distribuci√≥n de referencia (datos de entrenamiento).
    
    **Interpretaci√≥n de los Scores:**
    - **0.0 - 0.1**: Sin deriva (verde)
    - **0.1 - 0.2**: Deriva leve (amarillo)  
    - **0.2+**: Deriva significativa (rojo)
    
    **Datos utilizados:** Tu dataset limpio con {} registros de {} pa√≠ses.
    """.format(len(df_clean), df_clean['country'].nunique()))

def show_model_replacement_page():
    """P√°gina de reemplazo de modelos"""
    st.header("üîÑ Reemplazo Autom√°tico de Modelos")
    if MLOPS_AVAILABLE:
        try:
            create_streamlit_auto_replacement_dashboard()
        except Exception as e:
            st.error(f"Error en reemplazo de modelos: {e}")
    else:
        st.info("‚ÑπÔ∏è Reemplazo de modelos no disponible en modo local")
        st.write("Esta funcionalidad requiere una base de datos PostgreSQL.")

def show_ab_testing_page():
    """P√°gina de pruebas A/B"""
    st.header("üß™ Pruebas A/B")
    if MLOPS_AVAILABLE:
        try:
            ab_testing = ABTestingSystem()
            st.write("Sistema de pruebas A/B disponible")
        except Exception as e:
            st.error(f"Error en pruebas A/B: {e}")
    else:
        st.info("‚ÑπÔ∏è Pruebas A/B no disponibles en modo local")
        st.write("Esta funcionalidad requiere una base de datos PostgreSQL.")

# --- Main ---
def main():
    if page == "üè† Resumen":
        show_overview_page()
    elif page == "üß¨ Predecir Esperanza de Vida":
        show_prediction_page()
    elif page == "üìä An√°lisis de Datos":
        show_data_analysis_page()
    elif page == "üîç Monitoreo de Deriva":
        show_drift_monitoring_page()
    elif page == "üîÑ Reemplazo de Modelos":
        show_model_replacement_page()
    elif page == "üß™ Pruebas A/B":
        show_ab_testing_page()
    elif page == "üìà Rendimiento del Modelo":
        show_model_performance_page()

if __name__ == "__main__":
    main()
